<!DOCTYPE html>
<html>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css">
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Raleway">
<link rel="stylesheet" href="css/styling.css">

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js"></script>

<title>New Entry</title>

<!-- light grey bg for large screens -->

<body class="w3-light-grey">

  <!-- w3-content defines a container for fixed size centered content,
and is wrapped around the whole page content,-->
  <div class="w3-content w3-white " style="max-width:800px; height:500px; max-height:800px">
    <!-- Grid

<div class="w3-card-4">
  <div class="w3-row">
    <div class="col-xs-1">
      <a href="Home Page.html">  </a>
     </div>
  </div> -->

    <!-- Header -->
    <header class="w3-panel w3-center w3-opacity w3-padding-small">
      <div class="w3-padding-small">
        <div class="w3-bar w3-border">
					
          <button class="w3-bar-item w3-button" onclick="goBack()">back</button>
          <a href="http://localhost:3000" class="w3-bar-item w3-button ">home</a>
        </div>
      </div>

    </header>
    <div class="w3-padding" style="margin-top:-30px;">
      <div class="w3-card-4 w3-margin w3-white">
        <div class="w3-cell-row">
          <div class="timer w3-cell-middle w3-margin">
						<img class="timergraphic" src="middle.png">
						<div class="w3-bar"> 
              <div class="timercontainer">
                <div class="setters">
                  <div class="minutes-set">
                    <button data-setter="minutes-plus">+</button>
                    <button data-setter="minutes-minus">-</button>
                  </div>
                </div>
                <div class="circle"> <svg width="100" viewBox="0 0 220 220" xmlns="http://www.w3.org/2000/svg">
                  <g transform="translate(110,110)">
                    <circle r="100" class="e-c-base"/>
                    <g transform="rotate(-90)">
                      <circle r="100" class="e-c-progress"/>
                      <g id="e-pointer">
                        <circle cx="100" cy="0" r="8" class="e-c-pointer"/>
                      </g>
                    </g>
                  </g>
                  </svg> </div>
                <div class="controlls">
                  <div class="display-remain-time">05:00</div>
                  <button class="play" id="pause"></button>
                </div>
              </div>
            </div>	
					</div>

         

      <!-- FORM -->
      <div class="w3-card-4 w3-margin w3-white w3-padding-small">

        <div class="form-group">
          <textarea class="form-control rounded-0" id="exampleFormControlTextarea2" placeholder="Write here, right now..." rows="5"></textarea>
        </div>

      </div><!-- END FORM -->

      <!-- TAG AND SAVE -->
      <div class="w3-row w3-card-4 w3-padding-small w3-white">
        <div class="col-xs-10">
          <span id="tag1" class="w3-tag"></span>
					<span id="tag2" class="w3-tag"></span>
          <button type="button mx-auto" class="btn btn-default" id="myBtn" onclick="download()">Save</button>
          <!-- Trigger/Open The Modal -->

          <!-- The Modal -->
          <div id="myModal" class="modal">

            <!-- Modal content -->
            <div class="modal-content">
              <span class="close">&times;</span>
              <p>Draft Saved!</p>
            </div>

          </div>

        </div>

      </div>
    </div>
  </div><!-- END CONTENT-->

  <!-- END BODY -->
</body>
		
<script>
  function goBack() {
		window.history.back();
}

  function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
  }
    // each <a> element
    // class="... tag"
    // prompt2.js
    document.getElementById("tag1").innerHTML = getParameterByName('tag1');
    document.getElementById("tag2").innerHTML = getParameterByName('tag2');
  
  
  function download(){
    var text = document.getElementById("exampleFormControlTextarea2").value;
    text = text.replace(/\n/g, "\r\n"); // To retain the Line breaks.
    var blob = new Blob([text], { type: "text/plain"});
    var anchor = document.createElement("a");
    anchor.download = "entries.txt";
    anchor.href = window.URL.createObjectURL(blob);
    anchor.target ="_blank";
    anchor.style.display = "none"; // just to be safe!
    document.body.appendChild(anchor);
    anchor.click();
    document.body.removeChild(anchor);
  }
  

  // Get the modal
  var modal = document.getElementById('myModal');

  // Get the button that opens the modal
  var btn = document.getElementById("myBtn");

  // Get the <span> element that closes the modal
  var span = document.getElementsByClassName("close")[0];

  // When the user clicks the button, open the modal 
  btn.onclick = function() {
    modal.style.display = "block";
  }

  // When the user clicks on <span> (x), close the modal
  span.onclick = function() {
    modal.style.display = "none";
  }

  // When the user clicks anywhere outside of the modal, close it
  window.onclick = function(event) {
    if (event.target == modal) {
      modal.style.display = "none";
    }
  }

  
</script>
    
<!---TIMER--->
<script>
//circle start
let progressBar = document.querySelector('.e-c-progress');
let indicator = document.getElementById('e-indicator');
let pointer = document.getElementById('e-pointer');
let length = Math.PI * 2 * 100;
progressBar.style.strokeDasharray = length;
function update(value, timePercent) {
	var offset = - length - length * value / (timePercent);
	progressBar.style.strokeDashoffset = offset; 
	pointer.style.transform = `rotate(${360 * value / (timePercent)}deg)`; 
};
//circle ends
const displayOutput = document.querySelector('.display-remain-time')
const pauseBtn = document.getElementById('pause');
const setterBtns = document.querySelectorAll('button[data-setter]');
let intervalTimer;
let timeLeft;
let wholeTime = 5 * 60;
let isPaused = false;
let isStarted = false;
update(wholeTime,wholeTime); //refreshes progress bar
displayTimeLeft(wholeTime);
function changeWholeTime(seconds){
  if ((wholeTime + seconds) > 0){
    wholeTime += seconds;
    update(wholeTime,wholeTime);
  }
}
for (var i = 0; i < setterBtns.length; i++) {
    setterBtns[i].addEventListener("click", function(event) {
        var param = this.dataset.setter;
        switch (param) {
            case 'minutes-plus':
                changeWholeTime(1 * 60);
                break;
            case 'minutes-minus':
                changeWholeTime(-1 * 60);
                break;
            case 'seconds-plus':
                changeWholeTime(1);
                break;
            case 'seconds-minus':
                changeWholeTime(-1);
                break;
        }
      displayTimeLeft(wholeTime);
    });
}
function timer (seconds){ //counts time, takes seconds
  let remainTime = Date.now() + (seconds * 1000);
  displayTimeLeft(seconds);
  
  intervalTimer = setInterval(function(){
    timeLeft = Math.round((remainTime - Date.now()) / 1000);
    if(timeLeft < 0){
      clearInterval(intervalTimer);
      isStarted = false;
      setterBtns.forEach(function(btn){
        btn.disabled = false;
        btn.style.opacity = 1;
      });
      displayTimeLeft(wholeTime);
      pauseBtn.classList.remove('pause');
      pauseBtn.classList.add('play');
      return ;
    }
    displayTimeLeft(timeLeft);
  }, 1000);
}
function pauseTimer(event){
  if(isStarted === false){
    timer(wholeTime);
    isStarted = true;
    this.classList.remove('play');
    this.classList.add('pause');
    
    setterBtns.forEach(function(btn){
      btn.disabled = true;
      btn.style.opacity = 0.5;
    });
  }else if(isPaused){
    this.classList.remove('play');
    this.classList.add('pause');
    timer(timeLeft);
    isPaused = isPaused ? false : true
  }else{
    this.classList.remove('pause');
    this.classList.add('play');
    clearInterval(intervalTimer);
    isPaused = isPaused ? false : true ;
  }
}
function displayTimeLeft (timeLeft){ //displays time on the input
  let minutes = Math.floor(timeLeft / 60);
  let seconds = timeLeft % 60;
  let displayString = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  displayOutput.textContent = displayString;
  update(timeLeft, wholeTime);
}
pauseBtn.addEventListener('click',pauseTimer);
</script>


</html>
